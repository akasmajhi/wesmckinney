* Introduction
  - While pandas adopts many coding idioms from NumPy, the biggest difference is
    that pandas is designed for working with tabular or heterogeneous data.
    NumPy, by contrast, is best suited for working with homogeneously typed
    numerical array data.

* Pandas Data Structure
** Series
   - It is a 1-D array like object containing sequence of values of the same
     type and an associated array of data labels., called it's `index`.
   @code python
   obj = pd.Series([10, 20, 30, 40])
   @end
   - The string representation of a Series displayed interactively shows the
     index on the left and the values on the right. Since we did not specify an
     index for the data, a default one consisting of the integers 0 through N -
     1 (where N is the length of the data) is created. You can get the array
     representation and index object of the Series via its _array and index_
     attributes, respectively:
   @code python
   ob.array
   obj.index
   @end

   - you'll want to create a Series with an index identifying each data point with a label:
   @code python
   obj2 = pd.Series(data=[1973, 1978, 2003], index=["Akas", "Rosy", "Avisi"])
   @end

   @end
   - Using NumPy functions or NumPy-like operations, such as filtering with a
     Boolean array, scalar multiplication, or applying math functions, will
     preserve the index-value link:
   @code python
   obj2[obj2 < 2000] # The values under 2000
   @end

   - Another way to think about a Series is as a fixed-length, ordered
     dictionary, as it is a mapping of index values to data values. It can be
     used in many contexts where you might use a dictionary:
   - Should you have data contained in a Python dictionary, you can create a
     Series from it by passing the dictionary:
   @code python
   sdata = {"Ohio": 35000, "Texas": 71000, "Oregon": 16000, "Utah": 5000}
   # Python dictionary to pandas series
   # keys become the index

   obj3 = pd.Series(sdata)
   # making a python dictionary out of a pandas series
   obj3.to_dict()
   @end

   - The isna and notna functions in pandas should be used to detect missing
     data
   @code python
   regional_food = {"sambalpur": "sarsatia", "cuttack": "aloo dum", "dhenkanal":
                    "bara", "balasore": "moori"}
   # create a series from regional_food
   regional_food_series = pd.Series(regional_food)
   # define the index as a list
   regional_food_series_index = ["cuttack", "dhenkanal", "sambalpur", "bargarh"]
   # re-create the series with new index
   obj_food = pd.Series(data=regional_food, index=regional_food_series_index)
   # After the above command, (1) value for bargarh will be NaN since it is not
   # present in the original series and (2) balasore will be missing since the
   # new index does not contain balasore

   # check data using pd.isna and pd.notna
   obj_food[pd.isna(obj_food)]
   # will print bargarh with NaN
   obj_food[pd.notna(obj_food)]
   # will print rest of non-NaN values
   @end

   - Both the Series object itself and its index have a name attribute, which
     integrates with other areas of pandas functionality:
   @code python
   regional_food_dict = {"sambalpur": "sarsatia", "cuttack": "aloo dum",
                         "dhenkanal": "bara", "balasore": "moori"}
   regional_food_series = pd.Series(regional_food_dict)
   regional_food_series.name = 'Fav. Food' 
   regional_food_series.index.name = 'District'
   @end

** DataFrame

   - A DataFrame represents a rectangular table of data and contains an ordered,
     named collection of columns, each of which can be a different value type
     (numeric, string, Boolean, etc.). The DataFrame has both a row and column
     index; it can be thought of as a dictionary of Series all sharing the same
     index.
   @code python
   food = {"district": ["sambalpur", "cuttack", "dhenkanal", "balasore", "bargarh"], 
           "famous_food": ["sarsatia", "aloo dum", "bara", "moori", "gulgula"],
           "population": [253_000, 776_000, 91_000, 161_000, 104_000]}
   food_frame = pd.DataFrame(food)
   food_frame
   @end
*** access columns in DF
    - A column in a DataFrame can be retrieved as a Series either by
      dictionary-like notation or by using the dot attribute notation:
    @code python
    food_frame.district
    food_frame["district"] # both are valid syntaxes
    @end
    > Note
    - `frame2[column]` works for any column name, but frame2.column works only
      when the column name is a valid Python variable name and does not conflict
      with any of the method names in DataFrame. For example, if a column's name
      contains whitespace or symbols other than underscores, it cannot be
      accessed with the dot attribute method. 
*** access rows in DF
    - Rows can also be retrieved by position or name with the special iloc and
      loc attributes
    @code python
    food_frame.loc[1]
    food_frame.iloc[2]
    @end

*** modify column
    - Columns can be modified by assignment.
    @code python
    food_frame["debt"] = 100_000 # Assign a constant value to all rows
    food_frame["debt"] = np.arange(len(food_frame)) # assign a range of values
    @end
    - When you are assigning lists or arrays to a column, the value’s length
      must match the length of the DataFrame. If you assign a Series, its labels
      will be realigned exactly to the DataFrame’s index, inserting missing
      values in any index values not present:
    - Assigning a column that doesn’t exist will create a new column.

*** Delete a column
    - The del keyword will delete columns like with a dictionary.
    @code python
    del food_frame['western'] # provide the column name
    @end

*** creata a DataFrame from nested dictionary
    - If the nested dictionary is passed to the DataFrame, pandas will interpret
      the outer dictionary keys as the columns, and the inner keys as the row
      indices:
    @code python
    od_details = {"food": {"sambalpur": "sarsatia", "bargarh": "gul gula", "cuttack": "aaloo dum"}, 
                  "population": {"sambalpur": 253_000, "bargarh": 104_000, "cuttack": 776000},
                  "region": {"sambalpur": "West", "bargarh": "West", "cuttack": "East"}}
    od_details_df = pd.DataFrame(od_details)
    od_details_df
    @end

*** Transpose a DataFrame
    swapping rows with columns
    @code python
    od_details_df.T
    @end

*** TODO Details about DataFrames index and name attributeset
    - 

* Essential Functionality
  Day-to-day features that are commonly and largely used.
** Reindexing
   - to create a new object with the values rearranged to align with the new
     index
   - > `Is this section really required?`

** Dropping Entries from an Axis
**** Series
     - the `drop` method will return a new object with the indicated value or values
       deleted from an axis.
     @code python
     district_food = pd.Series(data=["Sarsatia", "Gul Gula", "Saakra"],
                               index=["Sambalpur", "Bolangir", "Kalahandi"])
     In [13]: district_food
     Out[13]:
     Sambalpur    Sarsatia
     Bolangir     Gul Gula
     Kalahandi      Saakra
     dtype: object

     # Drop one entry using the drop method
     In [14]: new_district_food = district_food.drop("Bolangir")
     # The original series does not change
     In [15]: district_food
     Out[15]:
     Sambalpur    Sarsatia
     Bolangir     Gul Gula
     Kalahandi      Saakra
     dtype: object
     # The series returned after the drop contains the change
     In [16]: new_district_food
     Out[16]:
     Sambalpur    Sarsatia
     Kalahandi      Saakra
     dtype: object
     In [17]:
     @end

**** DataFrame 

     @code python
     data = pd.DataFrame(np.arange(16).reshape((4, 4)), 
                         index=['Ohio', 'Colordo', 'Utah', 'New Your'],
                         columns=['one', 'two', 'three', 'four'])
     data.drop(index=['Ohio', 'Colorado'])
     data.drop(columns=['one', 'three'])
     # Data can also be dropped using axis value
     # axis = 1 means column
     data.drop('two', axis=1)
     data.drop(['two', 'one'], axis=1)
     # If you give an non-existing axis, you will get an error
     data.drop(['two', 'one', 'x'], axis=1)
     @end

** Indexing, Selection, and Filtering 
*** Indexing
**** Series Indexing
     - Series indexing (obj[...]) works analogously to NumPy array indexing,
       except you can use the Series’s index values instead of only integers.
     @code python
     obj = pd.Series(np.arange(4.), index=['a', 'b', 'c', 'd'])
     In [36]: obj
     Out[36]:
     a    0.0
     b    1.0
     b    2.0
     d    3.0
     dtype: float64 
     obj['b']
     In [39]: obj['b']
     Out[39]: 1.0
     @end

     - the preferred way to select index values is with the special loc
       operator:
     @code python
     obj.loc["a"] # For selecting a single item from the series
     obj.loc[["a", "c"]] # for selecting multiple entries of the series
     # Even the numeric index also works; but this appraoch is best avoided
     obj.loc[1] # Does not work in latest pandas library
     obj.iloc[1] # iloc works well though! And rightly so.

     @end

     > Since loc operator indexes exclusively with labels, there is also an iloc
       operator that indexes exclusively with integers to work consistently
       whether or not the index contains integers:

**** DataFrame Indexing
     - Indexing into a DataFrame retrieves one or more columns either with a
       single value or sequence:
     @code python
     data = pd.DataFrame(np.arange(16).reshape((4, 4)), 
                         index=["Ohio", "Colorado", "Utah", "New York"],
                         columns=["one", "two", "three", "four"])
     data
     Out[109]:
               one  two  three  four
     Ohio        0    1      2     3
     Colorado    4    5      6     7
     Utah        8    9     10    11
     New York   12   13     14    15
     @end

     - Select columns using the column name
     @code python
     data["two"]
     Out[113]:
     Ohio         1
     Colorado     5
     Utah         9
     New York    13
     # select multiple columns by passing array of column names
     data[['two', 'four']]
     @end
     - Slicing DataFrame - slicing or selecting data with a Boolean array
     @code python
     data[:2]
     data[1:4]
     data[data.three > 5]
     @end
     - The row selection syntax data[:2] is provided as a convenience. Passing a
       single element or a list to the `[]` operator selects columns.

     - Another use case is indexing with a Boolean DataFrame, such as one
       produced by a scalar comparison. Consider a DataFrame with all Boolean
       values produced by comparing with a scalar value:
     @code python
     data < 5
     Out[117]:
                 one    two  three   four
     Ohio       True   True   True   True
     Colorado   True  False  False  False
     Utah      False  False  False  False
     New York  False  False  False  False
     @end

     - We can use this DataFrame to assign the value 0 to each location with the
       value True, like so: 
     @code python
     data[data < 5] = 0
     In [119]: data
     Out[119]:
               one  two  three  four
     Ohio        0    0      0     0
     Colorado    0    5      6     7
     Utah        8    9     10    11
     New York   12   13     14    15     
     @end

*** Selection on DataFrame with loc and iloc 
    - Like Series, DataFrame has special attributes loc and iloc for label-based
      and integer-based indexing, respectively. Since DataFrame is
      two-dimensional, you can select a subset of the rows and columns with
      NumPy-like notation using either axis labels (loc) or integers (iloc). 
    @code python
    data 
    Out[188]:
          one  two  three  four
    Ohio        0    0      0     0
    Colorado    0    5      6     7
    Utah        8    9     10    11
    New York   12   13     14    15
    # Single row selection by passing index
    data.loc["Colorado"]
    Out[189]:
    one      0
    two      5
    three    6
    four     7
    @end

    - The result of selecting a single row is a Series with an index that
      contains the DataFrame's column labels. To select multiple roles, creating
      a new DataFrame, pass a sequence of labels:
    @code python
    # Cell selection using loc with index and column name
    data.loc["Colorado", "four"]
    Out[190]: 7
    @end
    - `iloc`
    -- Pass row and column index when using iloc
    @code python
    data 
    Out[237]:
              one  two  three  four
    Ohio        0    0      0     0
    Colorado    0    5      6     7
    Utah        8    9     10    11
    New York   12   13     14    15
    data.iloc[2, 3] # Cell for ['Utah', 'four'] which is 11
    @end
    - You can get multiple values/cells as a series using a list of list as
      parameter to iloc.
    @code python
    data.iloc[[1], [2, 3]] # colorado 'three', 'four' values
    Out[240]:
              three  four
    Colorado      6     7
    @end

    - Both indexing functions work with slices in addition to single labels or
      lists of labels:

    - Boolean arrays can be used with loc but not iloc:

**** Integer indexing pitfalls
     -> TODO: Read this again
**** Pitfalls with chained indexing
     -> TODO: Read this again
** Arithmetic & Data Alignment
*** Series 
    When 2 series are added, the union results in the union of common indexes
    and the missing indexes are populated with NaN
    @code python
    s1 = pd.Series(data=[7.3, -2.5, 3.4, 1.5], index=['a', 'c', 'd', 'e'])
    s2 = pd.Series(data=[-2.1, 3.6, -1.5, 4, 3.1], index=['a', 'c', 'e', 'f', 'g'])
    In [276]: s1 + s2 # Missing indexes are NaN populated.
    Out[276]:
    a    5.2
    c    1.1
    d    NaN
    e    0.0
    f    NaN
    g    NaN
    @end
    - `Note`: The internal data alignment introduces missing values in the label
      locations that don’t overlap. Missing values will then propagate in
      further arithmetic computations.

*** DataFrame
    - In the case of DataFrame, alignment is performed on both rows and columns:
    @code python
    df1 = pd.DataFrame(np.arange(9.).reshape((3, 3)), columns=list("bcd"),
                       index=["Ohio", "Texas", "Colorado"]) 
    f2 = pd.DataFrame(np.arange(12.).reshape((4, 3)), columns=list("bde"),
                      index=["Utah", "Ohio", "Texas", "Oregon"])
    In [286]: df1 + df2
    Out[286]:
                b   c     d   e
    Colorado  NaN NaN   NaN NaN
    Ohio      3.0 NaN   6.0 NaN
    Oregon    NaN NaN   NaN NaN
    Texas     9.0 NaN  12.0 NaN
    Utah      NaN NaN   NaN NaN
    # Since the "c" and "e" columns are not found in both DataFrame objects,
    # they appear as missing in the result. The same holds for the rows with
    # labels that are not common to both objects.
    @end

    - `Note:` If you add DataFrame objects with no column or row labels in
      common, the result will contain all nulls:

** Arithmetic methods with fill values
   - In arithmetic operations between differently indexed objects, you might
     want to fill with a special value, like 0, when an axis label is found in
     one object but not the other. Here is an example where we set a particular
     value to NA (null) by assigning np.nan to it:
   @code python
   df1 = pd.DataFrame(np.arange(12.).reshape((3, 4)), columns=list("abcd"))
   df2 = pd.DataFrame(np.arange(20.).reshape((4, 5)), columns=list("abcde"))
   In [294]: df1+df2
   Out[294]:
         a     b     c     d   e
   0   0.0   2.0   4.0   6.0 NaN
   1   9.0   NaN  13.0  15.0 NaN
   2  18.0  20.0  22.0  24.0 NaN
   3   NaN   NaN   NaN   NaN NaN
   @end
   - Using the add method on df1, I pass df2 and an argument to fill_value, which substitutes the passed value for any missing values in the operation:
   @code python
   df1.add(df2, fill_value=0)  
   Out[295]:
          a     b     c     d     e
   0   0.0   2.0   4.0   6.0   4.0
   1   9.0   5.0  13.0  15.0   9.0
   2  18.0  20.0  22.0  24.0  14.0
   3  15.0  16.0  17.0  18.0  19.0
   @end

** Operations between DataFrame and Series

*** Broadcasting
    - One row value is operated on each row of the x-dimensional array.
**** Series Broadcasting
     @code python
     arr = np.arange(12.).reshape((3, 4))  
     arr
     Out[300]:
     array([[ 0.,  1.,  2.,  3.],
            [ 4.,  5.,  6.,  7.],
            [ 8.,  9., 10., 11.]])
     arr[0]
     Out[301]: array([0., 1., 2., 3.])
     arr - arr[0]
     Out[302]:
     array([[0., 0., 0., 0.],
            [4., 4., 4., 4.],
            [8., 8., 8., 8.]])
     @end

**** DataFrame Broadcasting
     - DF broadcasting follows a similar patter
     @code python
     frame = pd.DataFrame(np.arange(12.).reshape((4, 3)), columns=list("bde"),
                          index=["Utah", "Ohio", "Texas", "Oregon"])
     series = frame.iloc[0]
     In [306]: frame - series
     Out[306]:
               b    d    e
     Utah    0.0  0.0  0.0
     Ohio    3.0  3.0  3.0
     Texas   6.0  6.0  6.0
     Oregon  9.0  9.0  9.0
     @end

     - If an index value is not found in either the DataFrame’s columns or the
       Series’s index, the objects will be reindexed to form the union:
     @code python
     series2 = pd.Series()
     @end





